#!/usr/bin/env python

import json, pickle, socket, websockets
from functools import partial
from twisted.internet import protocol, reactor, tcp
from twisted.web import resource, server, static

chiData = {}
pqsnData = {}

# Connected WebSocket clients
transport = set()

# Connected log collation clients
clientCount = 0

# Log collation server
class factory(protocol.Factory):
  class protocol:
    def connectionLost(ctx, reason):
      global clientCount

      clientCount -= 1
      for itm in transport:
        itm.write(json.dumps(clientCount))

    def dataReceived(ctx, data):

      # Ignore collation_secret

      @partial(setattr, ctx, 'dataReceived')
      def dataReceived(data):

        # Read IP address of the client's host machine and proxy response
        # transfer length for each entry in segment, update table and build
        # delta of changed rows

        delta = []

        entryCount = pickle.decode_long(data[20:24])

        offset = 188
        for _ in range(entryCount):
          entryLen = pickle.decode_long(data[offset + 12:offset + 16])

          chi = socket.inet_ntop(socket.AF_INET, data[offset + 36:offset + 40])

          # LogAccessHttp::marshal_proxy_resp_squid_len()
          psql = pickle.decode_long(data[offset + 56:offset + 64])

          # LogAccessHttp::marshal_client_req_http_method()
          start = offset + 64
          end = data.index('\0', start)
          cqhm = data[start:end]

          # LogAccessHttp::marshal_client_req_url_canon()
          start = (end + 1 - offset + 0x7 & ~0x7) + offset
          end = data.index('\0', start)
          cquc = data[start:end]

          # LogAccessHttp::marshal_client_auth_user_name()
          start = (end + 1 - offset + 0x7 & ~0x7) + offset
          end = data.index('\0', start)
          caun = data[start:end]

          # LogAccessHttp::marshal_proxy_hierarchy_route()
          start = (end + 1 - offset + 0x7 & ~0x7) + offset
          end = start + 8
          phr = data[start:end]

          # LogAccessHttp::marshal_server_host_name()
          start = end
          end = data.index('\0', start)
          pqsn = data[start:end]

          try:
            itm = chiData[chi]

          except KeyError:

            # TypeError: 'tuple' object does not support item assignment
            itm = chiData[chi] = [chi, 1, psql]

          else:
            itm[1] += 1
            itm[2] += psql

          delta.append(itm)

          try:
            itm = pqsnData[pqsn]

          except KeyError:

            # TypeError: 'tuple' object does not support item assignment
            itm = pqsnData[pqsn] = [pqsn, 1, psql]

          else:
            itm[1] += 1
            itm[2] += psql

          offset += entryLen

        for itm in transport:
          itm.write(json.dumps(delta))

    def makeConnection(ctx, nstTransport):
      global clientCount

      clientCount += 1
      for itm in transport:
        itm.write(json.dumps(clientCount))

tcp.Port(8085, factory()).startListening()

class open(resource.Resource):
  render = lambda ctx, request: json.dumps((chiData.values(), pqsnData.values(), clientCount))

# Add to and remove from connected WebSocket clients
class factory(protocol.Factory):
  class protocol:
    def connectionLost(ctx, reason):
      transport.remove(ctx.transport)

    def makeConnection(ctx, nstTransport):
      ctx.transport = nstTransport

      transport.add(ctx.transport)

resource = static.File(__file__ + '/..')

resource.putChild('open', open())
resource.putChild('skt', websockets.WebSocketsResource(factory()))

tcp.Port(6011, server.Site(resource)).startListening()

reactor.run()
